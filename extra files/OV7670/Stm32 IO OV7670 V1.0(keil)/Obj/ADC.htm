<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\ADC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\ADC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sat Sep 22 16:31:07 2012
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ili9320_Initializtion &rArr; LCD_X_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14bf5e0]">Reset_Handler</a>
 <LI><a href="#[dcd648]">NMIException</a>
 <LI><a href="#[dcd7b0]">HardFaultException</a>
 <LI><a href="#[dcd684]">MemManageException</a>
 <LI><a href="#[dcdd50]">BusFaultException</a>
 <LI><a href="#[14bf874]">UsageFaultException</a>
 <LI><a href="#[dcd3f0]">SVCHandler</a>
 <LI><a href="#[dcda08]">DebugMonitor</a>
 <LI><a href="#[dcd5d0]">PendSVC</a>
 <LI><a href="#[dcd3b4]">SysTickHandler</a>
 <LI><a href="#[14bf838]">WWDG_IRQHandler</a>
 <LI><a href="#[dcd60c]">PVD_IRQHandler</a>
 <LI><a href="#[dcd378]">TAMPER_IRQHandler</a>
 <LI><a href="#[dcd51c]">RTC_IRQHandler</a>
 <LI><a href="#[dcd828]">FLASH_IRQHandler</a>
 <LI><a href="#[dcd594]">RCC_IRQHandler</a>
 <LI><a href="#[dcd9cc]">EXTI0_IRQHandler</a>
 <LI><a href="#[dcd954]">EXTI1_IRQHandler</a>
 <LI><a href="#[dcd918]">EXTI2_IRQHandler</a>
 <LI><a href="#[dcd8dc]">EXTI3_IRQHandler</a>
 <LI><a href="#[dcd8a0]">EXTI4_IRQHandler</a>
 <LI><a href="#[dcdc9c]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[dcdc60]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[dcdc24]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[dcdbe8]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[dcdbac]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[dcdb70]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[dcdb34]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[dcddc8]">ADC1_2_IRQHandler</a>
 <LI><a href="#[14bf8ec]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[14bf8b0]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[dcdd14]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[dcdcd8]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[dcd864]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[dcd33c]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[dcd288]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[dcd2c4]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[dcd300]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[dcd24c]">TIM2_IRQHandler</a>
 <LI><a href="#[dcd210]">TIM3_IRQHandler</a>
 <LI><a href="#[dcd1d4]">TIM4_IRQHandler</a>
 <LI><a href="#[dcd738]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[dcd774]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[dcd6c0]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[dcd6fc]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[dcd4a4]">SPI1_IRQHandler</a>
 <LI><a href="#[dcd468]">SPI2_IRQHandler</a>
 <LI><a href="#[14bf9dc]">USART1_IRQHandler</a>
 <LI><a href="#[14bf9a0]">USART2_IRQHandler</a>
 <LI><a href="#[14bf964]">USART3_IRQHandler</a>
 <LI><a href="#[dcd990]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[dcd558]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[14bf928]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[dcd0e4]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[dcd030]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[dcd06c]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[dcd0a8]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[dcdd8c]">ADC3_IRQHandler</a>
 <LI><a href="#[dcd7ec]">FSMC_IRQHandler</a>
 <LI><a href="#[dcd4e0]">SDIO_IRQHandler</a>
 <LI><a href="#[dcd198]">TIM5_IRQHandler</a>
 <LI><a href="#[dcd42c]">SPI3_IRQHandler</a>
 <LI><a href="#[14bfa54]">UART4_IRQHandler</a>
 <LI><a href="#[14bfa18]">UART5_IRQHandler</a>
 <LI><a href="#[dcd15c]">TIM6_IRQHandler</a>
 <LI><a href="#[dcd120]">TIM7_IRQHandler</a>
 <LI><a href="#[dcdaf8]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[dcdabc]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[dcda80]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[dcda44]">DMA2_Channel4_5_IRQHandler</a>
 <LI><a href="#[dd4560]">main</a>
 <LI><a href="#[14b17b0]">__main</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[14b17b0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(.text)
</UL>
<P><STRONG><a name="[14b1468]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14b133c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14b10e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14b1300]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14b10e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14b1210]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[14bf5e0]"></a>Reset_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14b10e4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14b1300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14b133c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14b10a8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[dcddc8]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdd8c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdd50]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdd14]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdcd8]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd4f74]"></a>CLK_init_OFF</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ov7670.o(i.CLK_init_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_init_OFF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd4f38]"></a>CLK_init_ON</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ov7670.o(i.CLK_init_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_init_ON &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dcdc9c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdc60]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdc24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdbe8]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdbac]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdb70]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdb34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdaf8]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcdabc]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcda80]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcda44]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcda08]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMonitor))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd74f4]"></a>Delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ili9320.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
</UL>

<P><STRONG><a name="[dd459c]"></a>Demo_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.Demo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Demo_Init &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd41dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[dd4218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[dd4254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[dd4290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[dd42cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[dd4308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[dd4344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[dd4380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[dd43bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[dd43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[dd4434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[dd4470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[dd44ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetSystemHandlerPendingBit
<LI><a href="#[dd44e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[dd4524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dcd9cc]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd990]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd954]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd918]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd8dc]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd8a0]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd864]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd828]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd4524]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd44e8]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dcd7ec]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FSMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd7044]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd747c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[dd7008]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd747c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[dd6fcc]"></a>GPIO_Init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_Init
<LI><a href="#[dd4efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_CONTRL_CONFIG
<LI><a href="#[dd4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_ON
<LI><a href="#[dd4f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_OFF
<LI><a href="#[dd6054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_OUTPUT
<LI><a href="#[dd6090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_INPUT
<LI><a href="#[dd60cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[dd74b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[dd6f90]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[dd74b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[dcd7b0]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd774]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd738]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd6fc]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd6c0]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd74b8]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ili9320.o(i.LCD_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[dd6f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd72d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
</UL>

<P><STRONG><a name="[dd747c]"></a>LCD_FSMCConfig</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, ili9320.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd7008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[dd7044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd72d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
</UL>

<P><STRONG><a name="[dd7404]"></a>LCD_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ili9320.o(i.LCD_ReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
</UL>

<P><STRONG><a name="[dd738c]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili9320.o(i.LCD_WriteRAM))
<BR><BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd7350]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili9320.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd7224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Clear
</UL>

<P><STRONG><a name="[dd7314]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili9320.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd70bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
<LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
</UL>

<P><STRONG><a name="[dd72d8]"></a>LCD_X_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ili9320.o(i.LCD_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_X_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd747c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[dd74b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
</UL>

<P><STRONG><a name="[dcd684]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManageException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd648]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMIException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd44ac]"></a>NVIC_SetSystemHandlerPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetSystemHandlerPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4efc]"></a>OV7670_GPIO_CONTRL_CONFIG</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ov7670.o(i.OV7670_GPIO_CONTRL_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OV7670_GPIO_CONTRL_CONFIG &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dd4ec0]"></a>OV7670_GPIO_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ov7670.o(i.OV7670_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OV7670_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dd4e84]"></a>OV7670_config_window</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ov7670.o(i.OV7670_config_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OV7670_config_window &rArr; wrOV7670Reg &rArr; SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dd4e48]"></a>OV7670_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ov7670.o(i.OV7670_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OV7670_init &rArr; OV7670_config_window &rArr; wrOV7670Reg &rArr; SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OV7670reg
<LI><a href="#[dd4e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_config_window
<LI><a href="#[dd4ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_Init
<LI><a href="#[dd4efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_CONTRL_CONFIG
<LI><a href="#[dd4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_ON
<LI><a href="#[dd60cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[ddb1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dcd60c]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd5d0]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSVC))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd4470]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd6f54]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[dd74b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[dd6f18]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[dd4ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_Init
<LI><a href="#[dd4efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_CONTRL_CONFIG
<LI><a href="#[dd4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_ON
<LI><a href="#[dd4f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_OFF
<LI><a href="#[dd6054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_OUTPUT
<LI><a href="#[dd6090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_INPUT
<LI><a href="#[dd60cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Config
<LI><a href="#[dd74b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
</UL>

<P><STRONG><a name="[dd4434]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd43f8]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[dd41dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd43bc]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4380]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4344]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dcd594]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd4d58]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_MCOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd4efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_GPIO_CONTRL_CONFIG
<LI><a href="#[dd4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_ON
</UL>

<P><STRONG><a name="[dd4308]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd42cc]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4290]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4254]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd4218]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dd41dc]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd43f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
</UL>

<P><STRONG><a name="[dcd558]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd51c]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dd60cc]"></a>SCCB_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sccb.o(i.SCCB_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCCB_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dd6090]"></a>SCCB_SID_GPIO_INPUT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sccb.o(i.SCCB_SID_GPIO_INPUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCCB_SID_GPIO_INPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd5fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[dd6018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
</UL>

<P><STRONG><a name="[dd6054]"></a>SCCB_SID_GPIO_OUTPUT</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sccb.o(i.SCCB_SID_GPIO_OUTPUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[dd6fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd5fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
</UL>

<P><STRONG><a name="[dd6018]"></a>SCCBreadByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sccb.o(i.SCCBreadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCCBreadByte &rArr; SCCB_SID_GPIO_INPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_INPUT
<LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>

<P><STRONG><a name="[dd5fdc]"></a>SCCBwriteByte</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sccb.o(i.SCCBwriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd6054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_OUTPUT
<LI><a href="#[dd6090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SID_GPIO_INPUT
<LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>

<P><STRONG><a name="[dcd4e0]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SDIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd4a4]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd468]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd42c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd3f0]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd3b4]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTickHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd378]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd33c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd300]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd2c4]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd288]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd24c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd210]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd1d4]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd198]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd15c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd120]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd0e4]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd0a8]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd06c]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[dcd030]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bfa54]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bfa18]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf9dc]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf9a0]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf964]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf928]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf8ec]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf8b0]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf874]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14bf838]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[17b0784]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17b0748]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[17b070c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ddb1e4]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[ddb1a8]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
<LI><a href="#[dd5f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[dd5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[dd5fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noAck
<LI><a href="#[dd5fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[dd6018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
<LI><a href="#[ddb1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[dd729c]"></a>ili9320_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ili9320.o(i.ili9320_BGR2RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ili9320_BGR2RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd7224]"></a>ili9320_Clear</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ili9320.o(i.ili9320_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ili9320_Clear &rArr; ili9320_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[dd70bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
<LI><a href="#[dd7350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd71e8]"></a>ili9320_Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili9320.o(i.ili9320_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
</UL>

<P><STRONG><a name="[dd7134]"></a>ili9320_Initializtion</STRONG> (Thumb, 3612 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_Initializtion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ili9320_Initializtion &rArr; LCD_X_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd71e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Delay
<LI><a href="#[dd72d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
<LI><a href="#[dd7314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[dd7404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[dd74f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd70bc]"></a>ili9320_SetCursor</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ili9320.o(i.ili9320_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ili9320_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[dd7314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd7224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Clear
</UL>

<P><STRONG><a name="[dd4560]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = main &rArr; ili9320_Initializtion &rArr; LCD_X_Init &rArr; LCD_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Demo_Init
<LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
<LI><a href="#[dd4f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_ON
<LI><a href="#[dd4f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_init_OFF
<LI><a href="#[dd70bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_SetCursor
<LI><a href="#[dd7134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Initializtion
<LI><a href="#[dd7224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_Clear
<LI><a href="#[dd729c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9320_BGR2RGB
<LI><a href="#[dd7314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[dd7350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[dd738c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[ddb1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[dd5fa0]"></a>noAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sccb.o(i.noAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noAck
</UL>
<BR>[Calls]<UL><LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>

<P><STRONG><a name="[dd4e0c]"></a>rdOV7670Reg</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ov7670.o(i.rdOV7670Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rdOV7670Reg &rArr; SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd5f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[dd5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[dd5fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noAck
<LI><a href="#[dd5fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[dd6018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
<LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_config_window
</UL>

<P><STRONG><a name="[dd4dd0]"></a>set_OV7670reg</STRONG> (Thumb, 1124 bytes, Stack size 8 bytes, ov7670.o(i.set_OV7670reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_OV7670reg &rArr; wrOV7670Reg &rArr; SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
</UL>

<P><STRONG><a name="[dd5f64]"></a>startSCCB</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sccb.o(i.startSCCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = startSCCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>

<P><STRONG><a name="[dd5f28]"></a>stopSCCB</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sccb.o(i.stopSCCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopSCCB
</UL>
<BR>[Calls]<UL><LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV7670Reg
<LI><a href="#[dd4e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV7670Reg
</UL>

<P><STRONG><a name="[dd4d94]"></a>wrOV7670Reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ov7670.o(i.wrOV7670Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wrOV7670Reg &rArr; SCCBwriteByte &rArr; SCCB_SID_GPIO_OUTPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd5f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[dd5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[dd5fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[ddb1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd4dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OV7670reg
<LI><a href="#[dd4e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_init
<LI><a href="#[dd4e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7670_config_window
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
